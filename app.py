import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import pandas as pd
import asyncio

from telegram_parser import TelegramParser
from data_analyzer import NFTAnalyzer
from utils import load_channels, save_data, load_data
from auth import show_auth_page

st.set_page_config(page_title="NFT Analytics", layout="wide")

# Initialize session state
if 'is_authenticated' not in st.session_state:
    st.session_state.is_authenticated = False
if 'data_updated' not in st.session_state:
    st.session_state.data_updated = None
if 'found_channels' not in st.session_state:
    st.session_state.found_channels = None

def search_channels():
    with st.spinner("–ü–æ–∏—Å–∫ NFT –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø..."):
        parser = TelegramParser()
        # Create new event loop for async operations
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            channels = loop.run_until_complete(parser.search_nft_groups())
            loop.close()
            
            if channels and len(channels) > 0:
                st.session_state.found_channels = channels
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø")
            else:
                st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä–∏–º —Ö–æ—Ç—è –±—ã –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                if channels is None:
                    st.session_state.found_channels = []
                else:
                    st.session_state.found_channels = channels
                    
            return channels
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
            st.session_state.found_channels = []
            loop.close()
            return []

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not st.session_state.is_authenticated:
        show_auth_page()
        return

    st.title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ NFT –ü—Ä–æ–µ–∫—Ç–æ–≤")

    # Sidebar configuration
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤
    st.sidebar.subheader("–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏
    channel_name_filter = st.sidebar.text_input("–§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã", "")
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
    col_search1, col_search2 = st.sidebar.columns(2)
    with col_search1:
        if st.button("–ù–∞–π—Ç–∏ NFT –∫–∞–Ω–∞–ª—ã", use_container_width=True):
            with st.spinner("–ü–æ–∏—Å–∫ NFT –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø..."):
                parser = TelegramParser()
                # Create new event loop for async operations
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                    channels = loop.run_until_complete(parser.search_nft_groups(
                        name_filter=channel_name_filter if channel_name_filter else None
                    ))
                    loop.close()
                    
                    if channels and len(channels) > 0:
                        st.session_state.found_channels = channels
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø")
                    else:
                        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
                        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä–∏–º —Ö–æ—Ç—è –±—ã –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                        if channels is None:
                            st.session_state.found_channels = []
                        else:
                            st.session_state.found_channels = channels
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
                    st.session_state.found_channels = []
                    loop.close()
    
    with col_search2:
        if st.button("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", use_container_width=True):
            with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤..."):
                parser = TelegramParser()
                # Create new event loop for async operations
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    channels = loop.run_until_complete(parser.get_user_channels())
                    loop.close()
                    
                    if channels and len(channels) > 0:
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                        if channel_name_filter:
                            channels = [ch for ch in channels if channel_name_filter.lower() in ch['title'].lower()]
                            
                        st.session_state.found_channels = channels
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(channels)} –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø")
                    else:
                        st.warning("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã")
                        st.session_state.found_channels = []
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
                    st.session_state.found_channels = []
                    loop.close()
                    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
    if st.sidebar.button("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"):
        with st.spinner("–í—ã—Ö–æ–¥ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ Telegram..."):
            parser = TelegramParser()
            # Create new event loop for async operations
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                result = loop.run_until_complete(parser.leave_all_chats())
                loop.close()
                
                if result:
                    # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                    if 'found_channels' in st.session_state:
                        st.session_state.found_channels = []
                    st.success("–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ Telegram")
                    st.rerun()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
                loop.close()

    # Display found channels if available
    channels = []
    if st.session_state.found_channels:
        st.sidebar.subheader("–ù–∞–π–¥–µ–Ω–Ω—ã–µ NFT-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞")
        channels_df = pd.DataFrame(st.session_state.found_channels)

        # Add emoji indicators for type and privacy
        channels_df['–°—Ç–∞—Ç—É—Å'] = channels_df.apply(
            lambda x: f"{'üì¢' if x['type'] == 'channel' else 'üë•'} "
                     f"{'üîí' if x['is_private'] else 'üåê'} {x['title']}", 
            axis=1
        )

        selected_channels = st.sidebar.data_editor(
            channels_df[['–°—Ç–∞—Ç—É—Å', 'participants_count', 'type']],
            hide_index=False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            column_config={
                "–°—Ç–∞—Ç—É—Å": "–ö–∞–Ω–∞–ª/–ì—Ä—É–ø–ø–∞",
                "participants_count": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
                "type": "–¢–∏–ø"
            },
            use_container_width=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        if not selected_channels.empty:
            selected_indices = selected_channels.index.tolist()
            channels = []
            for i in selected_indices:
                if i < len(channels_df):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞
                    if channels_df.iloc[i]['username']:
                        channels.append(channels_df.iloc[i]['username'])
                    else:
                        channels.append(str(channels_df.iloc[i]['id']))
        else:
            channels = []
    else:
        # Default channels as fallback
        default_channels = ["NFTCalendar", "NFTDrops", "NFTProject"]
        channels_text = st.sidebar.text_area(
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª—ã Telegram –≤—Ä—É—á–Ω—É—é (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)", 
            "\n".join(default_channels)
        )
        channels = [ch.strip() for ch in channels_text.split("\n") if ch.strip()]

    # Date range selection
    col1, col2 = st.sidebar.columns(2)
    with col1:
        start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime.now() - timedelta(days=7))
    with col2:
        end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", datetime.now())

    # Update data button
    if st.sidebar.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        if not channels:
            st.sidebar.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        else:
            with st.spinner(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {len(channels)} Telegram –∫–∞–Ω–∞–ª–æ–≤..."):
                parser = TelegramParser()
                messages = parser.fetch_messages(channels, start_date, end_date)

                if not messages.empty:
                    save_data(messages)
                    st.session_state.data_updated = datetime.now()
                    st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {messages['channel'].nunique()} –∫–∞–Ω–∞–ª–æ–≤.")
                else:
                    st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏:\n" +
                            "1. –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç NFT-—Å–æ–æ–±—â–µ–Ω–∏–π\n" +
                            "2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API Telegram\n" +
                            "3. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö")
                    
                    # –ü—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤
                    if st.sidebar.button("–ù–∞–π—Ç–∏ –±–æ–ª—å—à–µ NFT-–∫–∞–Ω–∞–ª–æ–≤"):
                        search_channels()

    # Load and analyze data
    data = load_data()
    if data is not None and not data.empty:
        analyzer = NFTAnalyzer(data)

        # Display metrics
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤", analyzer.get_total_projects())
        with col2:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", len(channels))
        with col3:
            st.metric("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", analyzer.get_trending_count())

        # Trending Projects
        st.subheader("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ NFT –ø—Ä–æ–µ–∫—Ç—ã")
        trending = analyzer.get_trending_projects()
        fig = px.bar(
            trending,
            x='project',
            y='mentions',
            title="–°–∞–º—ã–µ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–µ NFT –ø—Ä–æ–µ–∫—Ç—ã",
            labels={'project': '–ü—Ä–æ–µ–∫—Ç', 'mentions': '–£–ø–æ–º–∏–Ω–∞–Ω–∏—è'}
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
        if not trending.empty and len(trending) > 0:
            st.info("""
            **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫?**
            1. **–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞**: –ß–µ–º –≤—ã—à–µ —Å—Ç–æ–ª–±–µ—Ü, —Ç–µ–º —á–∞—â–µ –ø—Ä–æ–µ–∫—Ç —É–ø–æ–º–∏–Ω–∞–ª—Å—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö
            2. **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞**: –ü—Ä–æ–µ–∫—Ç—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
            3. **–¢—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞**: –ì—Ä–∞—Ñ–∏–∫ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ NFT
            """)

        # Activity Timeline
        st.subheader("–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        timeline = analyzer.get_activity_timeline()
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=timeline.index,
            y=timeline.values,
            mode='lines+markers'
        ))
        fig.update_layout(
            title="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è NFT –ø—Ä–æ–µ–∫—Ç–æ–≤",
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        st.info("""
        **–û —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç —ç—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫?**
        1. **–î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞**: –ü–∏–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–Ω–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        2. **–¶–∏–∫–ª—ã –≤–Ω–∏–º–∞–Ω–∏—è**: –ú–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã —Ä–æ—Å—Ç–∞ –∏ —Å–ø–∞–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ NFT –ø—Ä–æ–µ–∫—Ç–∞–º
        3. **–†—ã–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è**: –†–µ–∑–∫–∏–µ —Å–∫–∞—á–∫–∏ —á–∞—Å—Ç–æ —Å–≤—è–∑–∞–Ω—ã —Å –≤–∞–∂–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
        """)

        # Project Details Table
        st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        project_details = analyzer.get_project_details()
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        if not project_details.empty:
            project_details = project_details.rename(columns={
                'project': '–ü—Ä–æ–µ–∫—Ç',
                'mentions': '–£–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                'channels': '–ö–∞–Ω–∞–ª—ã',
                'first_seen': '–ü–µ—Ä–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
                'sentiment': '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
            })
            
        st.dataframe(project_details, use_container_width=True)
        
        st.info("""
        **–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É?**
        1. **–ü—Ä–æ–µ–∫—Ç**: –ù–∞–∑–≤–∞–Ω–∏–µ NFT –ø—Ä–æ–µ–∫—Ç–∞, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        2. **–£–ø–æ–º–∏–Ω–∞–Ω–∏—è**: –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ–µ–∫—Ç –±—ã–ª —É–ø–æ–º—è–Ω—É—Ç –≤–æ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
        3. **–ö–∞–Ω–∞–ª—ã**: –í —Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –æ–±—Å—É–∂–¥–∞–ª—Å—è –ø—Ä–æ–µ–∫—Ç
        4. **–ü–µ—Ä–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ**: –ö–æ–≥–¥–∞ –ø—Ä–æ–µ–∫—Ç –≤–ø–µ—Ä–≤—ã–µ –ø–æ—è–≤–∏–ª—Å—è –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        5. **–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞**: –£—Å—Ä–µ–¥–Ω–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–ª–∞—Å—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        6. **–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ**: –û–±—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
        """)

    else:
        st.info("–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")

    # Footer
    st.sidebar.markdown("---")
    if st.session_state.data_updated:
        st.sidebar.text(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {st.session_state.data_updated}")

    # Logout button
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        st.session_state.is_authenticated = False
        st.rerun()

if __name__ == "__main__":
    main()