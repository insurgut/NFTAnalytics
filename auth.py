import streamlit as st
from telethon import TelegramClient, functions, types, errors
import os
import asyncio
from typing import Optional, Tuple

class TelegramAuth:
    def __init__(self):
        # API –∫–ª—é—á–∏ –≤—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–¥
        # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
        self.api_id = "12345678"  # –í–≤–µ–¥–∏—Ç–µ —Å—é–¥–∞ –≤–∞—à API ID –æ—Ç Telegram
        self.api_hash = "abcdef0123456789abcdef0123456789"  # –í–≤–µ–¥–∏—Ç–µ —Å—é–¥–∞ –≤–∞—à API Hash –æ—Ç Telegram
        self.client = None

    async def _connect(self) -> TelegramClient:
        """Initialize Telegram client connection"""
        if not self.client:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π
            if not self.api_id or not self.api_hash:
                print("–û—à–∏–±–∫–∞: API –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
                print(f"API ID –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {'–î–∞' if self.api_id else '–ù–µ—Ç'}")
                print(f"API Hash –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {'–î–∞' if self.api_hash else '–ù–µ—Ç'}")
                return None
            
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è user-—Ä–µ–∂–∏–º–∞
                self.client = TelegramClient(
                    'nft_analyzer_session',
                    api_id=int(self.api_id),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                    api_hash=self.api_hash,
                    device_model="NFT Analyzer",
                    system_version="1.0",
                    app_version="1.0",
                    lang_code="ru"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
                return None

        if not self.client.is_connected():
            await self.client.connect()

        return self.client

    async def send_code(self, phone: str) -> Tuple[bool, str]:
        """Send authentication code to phone number"""
        try:
            client = await self._connect()
            if not client:
                return False, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ Secrets."
            
            if not client.is_connected():
                try:
                    await client.connect()
                except Exception as conn_err:
                    return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {str(conn_err)}"
                
                if not client.is_connected():
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Telegram"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            try:
                result = await client(functions.auth.SendCodeRequest(
                    phone_number=phone,
                    api_id=int(self.api_id),
                    api_hash=self.api_hash,
                    settings=types.CodeSettings(
                        allow_flashcall=False,
                        current_number=True,
                        allow_app_hash=True,
                    )
                ))
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                if not hasattr(st.session_state, 'phone_code_hash'):
                    st.session_state.phone_code_hash = result.phone_code_hash
                else:
                    st.session_state.phone_code_hash = result.phone_code_hash
                
                print(f"–ü–æ–ª—É—á–µ–Ω phone_code_hash: {result.phone_code_hash}")
                return True, "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            except errors.PhoneNumberInvalidError:
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä +7XXXXXXXXXX"
            except Exception as req_err:
                error_msg = str(req_err)
                print(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {error_msg}")
                if "api_id" in error_msg.lower() or "api_hash" in error_msg.lower() or "bot" in error_msg.lower():
                    return False, "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏."
                return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {error_msg}"
        except Exception as e:
            print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ send_code: {str(e)}")
            return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}"

    async def sign_in(self, phone: str, code: str, password: Optional[str] = None) -> Tuple[bool, str]:
        """Sign in with code and optional 2FA password"""
        try:
            client = await self._connect()
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ phone_code_hash –≤ —Å–µ—Å—Å–∏–∏
                phone_code_hash = getattr(st.session_state, 'phone_code_hash', None)
                if not phone_code_hash:
                    return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (phone_code_hash). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ."
                
                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º phone_code_hash: {phone_code_hash}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π phone_code_hash –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                await client.sign_in(phone, code, phone_code_hash=phone_code_hash)
                return True, "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            except errors.SessionPasswordNeededError:
                if password:
                    await client.sign_in(password=password)
                    return True, "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ 2FA"
                return False, "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA"
            except Exception as e:
                return False, f"–û—à–∏–±–∫–∞: {str(e)}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"

def show_auth_page():
    """Display authentication page"""
    st.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram")

    if 'auth_stage' not in st.session_state:
        st.session_state.auth_stage = 'phone'
    if 'auth_message' not in st.session_state:
        st.session_state.auth_message = ''
    if 'phone' not in st.session_state:
        st.session_state.phone = ''

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    st.markdown("""
    üì± **–ü–æ—á–µ–º—É –Ω—É–∂–µ–Ω –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram –∏ –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**

    –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ NFT –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö, —Ç—Ä–µ–Ω–¥–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ –º–∏—Ä–µ NFT. –ü—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Telegram –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ø—Ä–æ—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ API Telegram, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ —Å–æ–≤–µ—Ä—à–∞—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ NFT –ø—Ä–æ–µ–∫—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –º–∏—Ä–µ NFT. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º - –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    """)

    auth = TelegramAuth()

    if st.session_state.auth_message:
        st.info(st.session_state.auth_message)

    if st.session_state.auth_stage == 'phone':
        phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)", 
                            value=st.session_state.phone,
                            placeholder="+7XXXXXXXXXX")

        if st.button("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"):
            if phone:
                st.session_state.phone = phone
                # Send code
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                success, message = loop.run_until_complete(auth.send_code(phone))
                loop.close()

                if success:
                    st.session_state.auth_stage = 'code'
                    st.session_state.auth_message = message
                    st.rerun()
                else:
                    st.error(message)
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

    elif st.session_state.auth_stage == 'code':
        st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", value=st.session_state.phone, disabled=True)
        code = st.text_input("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", type="password")

        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä"):
                st.session_state.auth_stage = 'phone'
                st.session_state.auth_message = ''
                st.rerun()

        with col2:
            if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"):
                if code:
                    # Verify code
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    success, message = loop.run_until_complete(
                        auth.sign_in(st.session_state.phone, code)
                    )
                    loop.close()

                    if success:
                        st.session_state.is_authenticated = True
                        st.session_state.auth_message = message
                        st.rerun()
                    elif "2fa" in message.lower():
                        st.session_state.auth_stage = '2fa'
                        st.session_state.auth_message = message
                        st.rerun()
                    else:
                        st.error(message)
                else:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    elif st.session_state.auth_stage == '2fa':
        st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", value=st.session_state.phone, disabled=True)
        password = st.text_input("–ü–∞—Ä–æ–ª—å 2FA", type="password")

        if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"):
            if password:
                # Verify 2FA
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                success, message = loop.run_until_complete(
                    auth.sign_in(st.session_state.phone, None, password)
                )
                loop.close()

                if success:
                    st.session_state.is_authenticated = True
                    st.session_state.auth_message = message
                    st.rerun()
                else:
                    st.error(message)
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA")